# Erick Maestri de Souza
#Para obter os pontos relativos a este trabalho, voc√™ dever√° criar um programa, utilizando a
#linguagem Python, C, ou C++. Este programa, quando executado, ir√° apresentar os resultados de
#opera√ß√µes que ser√£o realizadas entre dois conjuntos de dados.
#O programa que voc√™ desenvolver√° ir√° receber como entrada um arquivo de texto (.txt)
#contendo v√°rios conjuntos de dados e v√°rias opera√ß√µes. Estas opera√ß√µes e dados estar√£o representadas
#em um arquivo de textos contendo apenas os dados referentes as opera√ß√µes que devem ser realizadas
#segundo a seguinte regra fixa: a primeira linha do arquivo de texto de entrada conter√° o n√∫mero de
#opera√ß√µes que est√£o descritas no arquivo, este n√∫mero de opera√ß√µes ser√° um inteiro; as linhas
#seguintes seguir√£o sempre o mesmo padr√£o de tr√™s linhas: a primeira linha apresenta o c√≥digo da
#opera√ß√£o (U para uni√£o, I para interse√ß√£o, D para diferen√ßa e C produto cartesiano), a segunda e
#terceira linhas conter√£o os elementos dos conjuntos separados por virgulas. A seguir est√° um exemplo
#das linhas que podem existir em um arquivo de testes para o programa que voc√™ ir√° desenvolver:
#4
#U
#3, 5, 67, 7
#1, 2, 3, 4
#I
#1, 2, 3, 4, 5
#4, 5
#D
#1, A, C, 34
#A, C, D, 23
#C
#3, 4, 5, 5, A, B, R
#1, B, C, D, 1
#Neste exemplo temos 4 opera√ß√µes uma uni√£o (U), uma interse√ß√£o (I), um diferen√ßa (D) e um
#produto cartesiano (C). A uni√£o, definida por U, dever√° ser executada sobre os conjuntos {ùüë, ùüì, ùüîùüï, ùüï} e
#{ùüè, ùüê, ùüë, ùüí}, cujos elementos est√£o explicitados nas linhas posteriores a defini√ß√£o da oper√ß√£o (U).
#A resposta do seu programa dever√° conter a opera√ß√£o realizada, descrita por extenso, os dados
#dos conjuntos identificados, e o resultado da opera√ß√£o. No caso da uni√£o a linha de sa√≠da dever√° conter
#a informa√ß√£o e a formata√ß√£o mostrada a seguir:
#Uni√£o: conjunto 1 {3, 5, 67, 7}, conjunto 2 {1, 2, 3, 4}. Resultado: {3, 5, 67, 7, 1, 2, 4}
#Seu programa dever√° mostrar a sa√≠da no terminal, ou em um arquivo de textos. Em qualquer
#um dos casos, a sa√≠da ser√° composta por uma linha de sa√≠da para cada opera√ß√£o constante no arquivo
#de textos de entrada formatada segundo o exemplo de sa√≠da acima. Observe as letras mai√∫sculas e
#min√∫sculas, e os pontos utilizados na formata√ß√£o da linha de sa√≠da apresenta acima.
#No caso do texto de exemplo, teremos 4 linhas, e apenas 4 linhas de sa√≠da, formatadas e
#pontuadas conforme o exemplo de sa√≠da acima. O uso de linhas extras na sa√≠da, ou erros de formata√ß√£o,
#implicam em perda de pontos como pode ser visto na rubrica de avalia√ß√£o constante neste documento.

#Criei uma pasta com meu c√≥digo e os arquivos para serem lidos; pode-se tanto alterar um c√≥digo j√° existente ou s√≥ incluir o novo arquivo na pasta.
#Detalhes de como abrir os arquivos no fim do c√≥digo; no √∫ltimo coment√°rio

import re
from itertools import product

def abrir_arquivo(path): #Como ser√£o realizado testes, uma fun√ß√£o √© necess√°ria para otimiza√ß√£o.
    with open(path, "r") as file:
        conteudo = file.read().splitlines()
    return conteudo

def processar_operacoes(conteudo_arquivo): #Calcula quantas opera√ß√µes ser√£o feitas no arquivo.
    numero_repeticoes = int(conteudo_arquivo[0])
    linha_atual = 1

    for _ in range(numero_repeticoes):
        if linha_atual + 2 >= len(conteudo_arquivo):
            break

        operacao = conteudo_arquivo[linha_atual]
        linha_atual += 1

        numeros_A = re.findall(r"\d+|\w", conteudo_arquivo[linha_atual]) #Gra√ßas ao import re, posso usar d+ para interpretar corretamente n√∫meros consecutivos com mais de uma casa decimal e o w para interpretar alfanum√©ricos.
        numeros_B = re.findall(r"\d+|\w", conteudo_arquivo[linha_atual + 1])

        A = []
        B = []

        for num in numeros_A:
            A.append(int(num) if num.isdigit() else num) #Caso seja um n√∫mero, ele converte para inteiro, se n√£o, o caracter se mant√©m como string e √© adicionado na lista A.


        for num in numeros_B:
            B.append(int(num) if num.isdigit() else num)

        conjuntoA = set(A) #Transformar listas em conjuntos me permite executar comandos naturais do Python para Uni√£o, Intersec√ß√£o e Diferen√ßa.
        conjuntoB = set(B)

        if operacao == "U":
            resultado = conjuntoA | conjuntoB
            print(f"Uni√£o: conjunto A {conjuntoA}, conjunto B {conjuntoB}. Resultado: {resultado}")
        elif operacao == "I":
            resultado = conjuntoA & conjuntoB
            print(f"Intersec√ß√£o: conjunto A {conjuntoA}, conjunto B {conjuntoB}. Resultado: {resultado}")
        elif operacao == "D":
            resultado = conjuntoA - conjuntoB
            print(f"Diferen√ßa: conjunto A {conjuntoA}, conjunto B {conjuntoB}. Resultado: {resultado}")
        elif operacao == "C":
            resultado = list(product(A, B))
            print(f"Produto Cartesiano: conjunto A {conjuntoA}, conjunto B {conjuntoB}. Resultado: {resultado}")
        else:
            print("Opera√ß√£o inv√°lida")

        linha_atual += 2

executar_arquivo = input("Nome do arquivo a ser executado: ") #Digite exatamente o nome do arquivo com sua extens√£o; Ex: Teste 3.txt
conteudo_arquivo = abrir_arquivo((executar_arquivo))

processar_operacoes(conteudo_arquivo)







